// === server.js (version corrigÃ©e pour Vue.js front-end) ===
const express = require("express");
const app = express();
require("dotenv").config();
const connectDB = require("./config/db");
const cookieParser = require("cookie-parser");


// Import middlewares et routes
const usersCtrl = require('./controllers/users.controllers');
const checkJWT = require('./middlewares/checkJWT');
const usersRoutes = require('./routes/users.routes');
const catwaysRoutes = require('./routes/catways.routes');
const reservationsRoutes = require('./routes/reservations.routes');


// Connexion Ã  MongoDB
connectDB();

// Middlewares globaux
const cors = require('cors');

app.use(cors({
  origin: 'https://aesthetic-lily-a6e69e.netlify.app',
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Middleware de log
app.use((req, res, next) => {
  console.log(`ðŸ§­ [${req.method}] ${req.originalUrl}`);
  next();
});

// === Routes publiques ===
app.post("/login", usersCtrl.login); // Seule route non protÃ©gÃ©e

// === Middleware d'authentification
app.use(checkJWT); // â›” Tout ce qui suit est sÃ©curisÃ©

// === Routes sÃ©curisÃ©es
app.use('/users', usersRoutes);       // âœ… AccÃ¨s rÃ©servÃ© aux admins connectÃ©s
app.use('/catways', catwaysRoutes);   // âœ… idem
app.use('/catways', reservationsRoutes); // si sÃ©parÃ©


// Lancement serveur
const port = process.env.PORT || 3001;
app.listen(port, () => {
  console.log(`ðŸš€ Serveur en ligne sur http://localhost:${port}`);
});
